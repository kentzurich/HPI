// <auto-generated />
using System;
using HPIApp.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HPIApp.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230527060338_transferStatusColumnFromApplicationUserToTransaction")]
    partial class transferStatusColumnFromApplicationUserToTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HPIApp.Models.AboutUsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("VideoBoxUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contentDescription_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contentDescription_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contentDescription_3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contentTitle_1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("contentTitle_2")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("contentTitle_3")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("mainContentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mainContentTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("AboutUsSection");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            VideoBoxUrl = "https://placehold.co/1024x692/png",
                            VideoUrl = "https://www.youtube.com/watch?v=uCPjdfCUowg&list=RDpe5H8xY2pyY&index=6",
                            contentDescription_1 = "We believe that prayer is a powerful tool for healing. We offer prayer for those who are seeking physical, emotional, or spiritual healing.",
                            contentDescription_2 = "We offer counseling to help people deal with the challenges of life. We believe that counseling can help people to heal from emotional wounds and to find hope for the future.",
                            contentDescription_3 = "We offer support groups for people who are dealing with specific challenges, such as grief, addiction, or chronic illness. We believe that support groups can provide a safe place for people to share their experiences and to find support from others who understand what they are going through.",
                            contentTitle_1 = "Prayer",
                            contentTitle_2 = "Counseling",
                            contentTitle_3 = "Support groups",
                            mainContentDescription = "The Healing Ministry is a non-profit organization dedicated to providing healing and hope to those who are hurting. We offer a variety of services, including prayer, counseling, and support groups. We believe that everyone deserves to experience the healing power of God.",
                            mainContentTitle = "About Us"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nueva Ecija"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cavite"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Name = "Cluster A",
                            Slot = 3000
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Name = "Cluster B",
                            Slot = 3000
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 2,
                            Name = "Cluster A",
                            Slot = 3000
                        });
                });

            modelBuilder.Entity("HPIApp.Models.CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("facebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkedinUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("twitterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Palo Maria, Bongabon, Nueva Ecija",
                            Email = "himplusinternational@gmail.com",
                            PhoneNo = "+63 915 4094657"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.ContactSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ContactSection");
                });

            modelBuilder.Entity("HPIApp.Models.EventsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventsSection");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventDescription = "Healing services: Healing services are typically held in churches or other religious settings. They involve prayer, worship, and sometimes the laying on of hands.\r\n\r\nHealing conferences: Healing conferences are typically held over a weekend or a week. They feature speakers, workshops, and other activities that focus on healing.\r\n\r\nHealing retreats: Healing retreats are typically held in a quiet setting, such as a camp or a retreat center. They offer participants the opportunity to relax, pray, and receive healing.\r\n\r\nHealing prayer groups: Healing prayer groups are typically held on a weekly or monthly basis. They provide a safe place for people to come together to pray for healing.\r\n\r\nHealing ministries: Healing ministries are typically run by individuals or organizations that are dedicated to providing healing to those who are hurting. They offer a variety of services, such as prayer, counseling, and support groups."
                        });
                });

            modelBuilder.Entity("HPIApp.Models.FAQSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FAQSection");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "oo dahil paperless and validation at online remittance lamang Ang proseso. Matagal na Ang 2 days",
                            Question = "Mabilis lang ba matanggap Ang assistance?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "oo subalit mag aaply muli Ng registration at magbabayad Ng registration fee na P120.00 at initial monthly fund na P150.00",
                            Question = "Pwede pa bang bumalik kung matagal nang huminto sa"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "mag apply Ng activation status at magbayad Ng activation fee na P50 at bayaran Ang di nahulugan.",
                            Question = "Ano pwede Gawin kung gusto bumalik maging active?"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.GallerySection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GallerySection");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImgUrl = "https://placehold.co/800x600/png"
                        },
                        new
                        {
                            Id = 2,
                            ImgUrl = "https://placehold.co/800x600/png"
                        },
                        new
                        {
                            Id = 3,
                            ImgUrl = "https://placehold.co/800x600/png"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.HeroSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Header1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Header2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("backgroundImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeroSection");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Header1 = "HPI",
                            Header2 = "HIM Plus International",
                            backgroundImgUrl = "\\img\\herosection\\2a3a35a4-4544-48b9-9066-6ac4d279ebcf.jpg"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.Logo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("logoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textLogo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Logo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            logoUrl = "\\img\\logo\\9d4cc6e7-4ea9-4724-8a3b-782d525c3844.png",
                            textLogo = "HIM Plus International"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GCash"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Religion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Seventh Day Adventist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("HPIApp.Models.TestimonialSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Testimony")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdded")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TestimonialSection");
                });

            modelBuilder.Entity("HPIApp.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentProofUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentRefNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("Date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("HPIApp.Models.WhyUsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("contentDescription_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contentDescription_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contentDescription_3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contentTitle_1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("contentTitle_2")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("contentTitle_3")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("mainContentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mainContentTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("WhyUsSection");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            contentDescription_1 = "We offer healing prayer to those who are seeking physical, emotional, or spiritual healing. We believe that God has the power to heal all kinds of sickness and disease. We invite you to come and experience the healing power of God through prayer.",
                            contentDescription_2 = "We offer healing touch to those who are seeking physical, emotional, or spiritual healing. Healing touch is a gentle, non-invasive form of energy healing that can help to promote relaxation, reduce pain, and improve overall well-being. We invite you to come and experience the healing power of God through healing touch.",
                            contentDescription_3 = "We offer laying on of hands to those who are seeking physical, emotional, or spiritual healing. Laying on of hands is a biblical practice that has been used for centuries to pray for healing. We believe that God can use this simple act to bring healing to those who are hurting. We invite you to come and experience the healing power of God through laying on of hands.",
                            contentTitle_1 = "Healing Prayer",
                            contentTitle_2 = "Healing Touch",
                            contentTitle_3 = "Laying on of Hands",
                            mainContentDescription = "We are a ministry dedicated to providing healing and hope to those who are hurting. We offer a variety of services, including prayer, counseling, and support groups. We believe that everyone deserves to experience the healing power of God.",
                            mainContentTitle = "Why HPI?"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HPIApp.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("Date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PresentAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("Date");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.HasIndex("ClassId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ReligionId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("HPIApp.Models.Class", b =>
                {
                    b.HasOne("HPIApp.Models.Branch", "Branch")
                        .WithMany("Class")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("HPIApp.Models.TestimonialSection", b =>
                {
                    b.HasOne("HPIApp.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("TestimonialSection")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HPIApp.Models.Transaction", b =>
                {
                    b.HasOne("HPIApp.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Transaction")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("HPIApp.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Transaction")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HPIApp.Models.ApplicationUser", b =>
                {
                    b.HasOne("HPIApp.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HPIApp.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HPIApp.Models.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Gender");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("HPIApp.Models.Branch", b =>
                {
                    b.Navigation("Class");
                });

            modelBuilder.Entity("HPIApp.Models.PaymentMethod", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("HPIApp.Models.ApplicationUser", b =>
                {
                    b.Navigation("TestimonialSection");

                    b.Navigation("Transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
